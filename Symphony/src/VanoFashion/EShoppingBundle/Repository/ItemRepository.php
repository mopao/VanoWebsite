<?php

namespace VanoFashion\EShoppingBundle\Repository;


use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends \Doctrine\ORM\EntityRepository
{

  /**
   * get all items
   */
	public function getItems($page, $nbPerPage){

		$qb=$this->createQueryBuilder('i')
                 ->innerJoin('i.stocks', 's')
                 ->addSelect('s')
                 ->innerJoin('i.images', 'img')
                 ->addSelect('img')
                 ->groupBy('i.codeItem')
                 ->orderBy('i.addingDate', 'DESC')
                 ->getQuery();
        

    $qb->setFirstResult(($page-1) * $nbPerPage);      

    $qb->setMaxResults($nbPerPage);       

    return new Paginator($qb, true);

	}

   /**
   * get  items belonging to a given product
   */
  public function getItemsByProduct($products){

    $qb=$this->createQueryBuilder('i')
                 ->innerJoin('i.stock', 's')
                 ->addSelect('s');

        $qb->innerJoin('i.type', 't')
           ->addSelect('t');

        $qb->innerJoin('i.product', 'p')
           ->addSelect('p');

        $qb->innerJoin('i.images', 'img')
           ->addSelect('img');

        
        $qb->where($qb->expr()->in('p.name', $products));

        return $qb->getQuery()
                  ->getResult();

  }

  /**
   * get  items belonging to the given products 
   * and itemTypes
   */
  public function getItemsByProductAndTypes($products, $types){

    $qb=$this->createQueryBuilder('i')
                 ->innerJoin('i.stock', 's')
                 ->addSelect('s');

        $qb->innerJoin('i.type', 't')
           ->addSelect('t');

        $qb->innerJoin('i.product', 'p')
           ->addSelect('p');

        $qb->innerJoin('i.images', 'img')
           ->addSelect('img');

        
        $qb->where($qb->expr()->in('p.name', $products));
        $qb->andWhere($qb->expr()->in('t.type', $types));

        return $qb->getQuery()
                  ->getResult();

  }

  /**
   * get  items belonging to a given itemType
   */
  public function getItemsByTYpe($types){

    $qb=$this->createQueryBuilder('i')
                 ->innerJoin('i.stock', 's')
                 ->addSelect('s');

        $qb->innerJoin('i.type', 't')
           ->addSelect('t');

        $qb->innerJoin('i.product', 'p')
           ->addSelect('p');

        $qb->innerJoin('i.images', 'img')
           ->addSelect('img');

       
       $qb->where($qb->expr()->in('t.type', $types));
        

        return $qb->getQuery()
                  ->getResult();

  }



  /**
   * get item with a given id
   */

  public function getItem($id){

    $qb=$this->createQueryBuilder('i')
            ->where('i.id = :id')
            ->setParameter('id',$id)
            ->innerJoin('i.stocks', 's')
            ->addSelect('s')
            ->innerJoin('i.images', 'img')
            ->addSelect('img');
    
   
    return $qb->getQuery()
              ->getSingleResult();

  }
}
