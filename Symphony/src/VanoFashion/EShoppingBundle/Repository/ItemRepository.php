<?php

namespace VanoFashion\EShoppingBundle\Repository;


use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends \Doctrine\ORM\EntityRepository
{

  /**
   * get all items
   */
	public function getItems($page, $nbPerPage, array $filter=null){

		$qb=$this->createQueryBuilder('i')
                 ->innerJoin('i.stocks', 's')
                 ->addSelect('s')
                 ->innerJoin('i.gender', 'g')
                 ->addSelect('g')
                 ->innerJoin('i.product', 'p')
                 ->addSelect('p')
                 ->innerJoin('i.images', 'img')
                 ->addSelect('img');
                 
        
    if($filter!==null and count($filter)>0){
      foreach ($filter as $key => $value) {
        # code...
         if($key==="product"){
          $qb->andWhere($qb->expr()->in('p.name', $value));
         }
         elseif ($key==="gender") {
           # code...
          $qb->andWhere($qb->expr()->in('g.'.$key, $value));
         }
         elseif ($key==="price") {
           # code...
          if ($value[1]==="Inf") {
            # code...
             $qb->andWhere($qb->expr()->gte('s.'.$key, $value[0]));
          } else {
            # code...
            $qb->andWhere($qb->expr()->between('s.'.$key, $value[0], $value[1]));
          }          
          
         }
         else{
          $qb->andWhere($qb->expr()->in('i.'.$key, $value));
         }
      }
    }

    $qb->addGroupBy('i.codeItem')
       ->addGroupBy('s.id')
       ->addGroupBy('g.id')
       ->addGroupBy('p.id')
       ->addGroupBy('img.id')
                 ->orderBy('i.addingDate', 'DESC')
                 ->getQuery();

    if ($page!=0 and $nbPerPage!=0) {
           # code...
      $qb->setFirstResult(($page-1) * $nbPerPage);      

      $qb->setMaxResults($nbPerPage);  
    }     

     return $qb->getQuery()
              ->getResult();
	}




  /**
   * get item with a given id
   */

  public function getItem(array $filter){

    $qb=$this->createQueryBuilder('i')
             ->innerJoin('i.stocks', 's')
             ->addSelect('s')
             ->innerJoin('i.gender', 'g')
             ->addSelect('g')
             ->innerJoin('i.product', 'p')
             ->addSelect('p')
             ->innerJoin('i.images', 'img')
             ->addSelect('img');
           


      if($filter!==null and count($filter)>0){
      foreach ($filter as $key => $value) {
        # code...
       
          $qb->andWhere($qb->expr()->in('i.'.$key, $value));
         
      }
    }
    
   
    return $qb->getQuery()
              ->getSingleResult();

  }

  
}
